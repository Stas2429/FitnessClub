// <auto-generated />
using System;
using FitnessCenter.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitnessCenter.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitnessCenter.Data.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("FitnessCenter.Data.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FitnessCenter.Data.ClientReserv", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservId")
                        .HasColumnType("uuid");

                    b.HasKey("ClientId", "ReservId");

                    b.HasIndex("ReservId");

                    b.ToTable("ClientReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Reserv", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Reservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("FitnessCenter.Data.ScheduleReserv", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservId")
                        .HasColumnType("uuid");

                    b.HasKey("ScheduleId", "ReservId");

                    b.HasIndex("ReservId");

                    b.ToTable("ScheduleReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("FitnessCenter.Data.SubscriptionReserv", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservId")
                        .HasColumnType("uuid");

                    b.HasKey("SubscriptionId", "ReservId");

                    b.HasIndex("ReservId");

                    b.ToTable("SubscriptionReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("FitnessCenter.Data.TrainerReserv", b =>
                {
                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReservId")
                        .HasColumnType("uuid");

                    b.HasKey("TrainerId", "ReservId");

                    b.HasIndex("ReservId");

                    b.ToTable("TrainerReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.ClientReserv", b =>
                {
                    b.HasOne("FitnessCenter.Data.Client", "Client")
                        .WithMany("ClientReservs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessCenter.Data.Reserv", "Reserv")
                        .WithMany("ClientReservs")
                        .HasForeignKey("ReservId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Reserv");
                });

            modelBuilder.Entity("FitnessCenter.Data.Reserv", b =>
                {
                    b.HasOne("FitnessCenter.Data.Class", "Class")
                        .WithMany("Reservs")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessCenter.Data.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("FitnessCenter.Data.ScheduleReserv", b =>
                {
                    b.HasOne("FitnessCenter.Data.Reserv", "Reserv")
                        .WithMany("ScheduleReservs")
                        .HasForeignKey("ReservId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessCenter.Data.Schedule", "Schedule")
                        .WithMany("ScheduleReservs")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserv");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("FitnessCenter.Data.SubscriptionReserv", b =>
                {
                    b.HasOne("FitnessCenter.Data.Reserv", "Reserv")
                        .WithMany("SubscriptionReservs")
                        .HasForeignKey("ReservId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessCenter.Data.Subscription", "Subscription")
                        .WithMany("SubscriptionReservs")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserv");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("FitnessCenter.Data.TrainerReserv", b =>
                {
                    b.HasOne("FitnessCenter.Data.Reserv", "Reserv")
                        .WithMany("TrainerReservs")
                        .HasForeignKey("ReservId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessCenter.Data.Trainer", "Trainer")
                        .WithMany("TrainerReservs")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserv");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("FitnessCenter.Data.Class", b =>
                {
                    b.Navigation("Reservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Client", b =>
                {
                    b.Navigation("ClientReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Reserv", b =>
                {
                    b.Navigation("ClientReservs");

                    b.Navigation("ScheduleReservs");

                    b.Navigation("SubscriptionReservs");

                    b.Navigation("TrainerReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Schedule", b =>
                {
                    b.Navigation("ScheduleReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Subscription", b =>
                {
                    b.Navigation("SubscriptionReservs");
                });

            modelBuilder.Entity("FitnessCenter.Data.Trainer", b =>
                {
                    b.Navigation("TrainerReservs");
                });
#pragma warning restore 612, 618
        }
    }
}
